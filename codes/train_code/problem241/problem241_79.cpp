/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>

using namespace std;

class CTwoAlpinists {
public:
    void solve(std::istream &cin, std::ostream &cout) {
        int n;
        cin >> n;
        vector<long long int> t_vec(n, 0);
        for (int i = 0; i < n; ++i) {
            cin >> t_vec[i];
        }
        vector<long long int> a_vec(n, 0);
        for (int i = 0; i < n; ++i) {
            cin >> a_vec[i];
        }
        int cnt = 0;
        vector<long long int> cnt_t;
        vector<long long int> cnt_a;
        long long int now_a = 0;
        long long int now_t = 0;
        long long ans = 1;
        for (int j = 0; j < n; ++j) {
            if (now_a == a_vec[n - 1 - j])cnt_a.push_back(now_a);
            else cnt_a.push_back(1);
            now_a = a_vec[n - 1 - j];
            if (now_t == t_vec[j])cnt_t.push_back(now_t);
            else cnt_t.push_back(1);
            now_t = t_vec[j];
        }
        for (int k = 0; k < n; ++k) {
            if (cnt_a[n - 1 - k] == 1 && cnt_t[k] == 1 && t_vec[k] != a_vec[k]) ans = 0;
            else if (cnt_a[n - 1 - k] == 1 && a_vec[k] > t_vec[k]) ans = 0;
            else if (cnt_t[k] == 1 && t_vec[k] > a_vec[k]) ans = 0;
            ans *= min(cnt_a[n - 1 - k], cnt_t[k]);
            ans = ans % 1000000007;
        }
        cout << ans << endl;
    }
};


int main() {
    CTwoAlpinists solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
