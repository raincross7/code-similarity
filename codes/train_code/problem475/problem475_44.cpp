/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include "bits/stdc++.h"

#define REP(i,x,y) for(int i=(x);i<(y);i++)
#define RREP(i,x,y) for(int i=(y)-1;i>=(x);i--)
#define all(x) (x).begin(),(x).end()
//#define int long long

using namespace std;

// conversion
inline int toInt(string s) {int v; istringstream sin(s);sin>>v;return v;}
template<class T> inline string toString(T x) {ostringstream sout;sout<<x;return sout.str();}

#define dump(x)  cerr << #x << " = " << (x) << endl
#define debug(x) cerr << #x << " = " << (x) << " (L" << __LINE__ << ")" << " " << __FILE__ << endl

typedef long long ll;

const ll MOD = 1e9 + 7;

class FEngines {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int N;
        in >> N;
	    vector<int> X(N), Y(N);
	    REP(i,0,N) in >> X[i] >> Y[i];

	    vector<tuple<double,int,int>> xy(N);
	    REP(i,0,N) {
            tuple<double,int,int> t{atan2((double)Y[i], (double)X[i]), X[i], Y[i]};
            xy[i] = move(t);
	    }
	    sort(all(xy));

	    ll answer = 0;
	    REP(length,1,N+1) {
	        int x = 0, y = 0;
	        REP(i,0,length) {
	            x += get<1>(xy[i]);
	            y += get<2>(xy[i]);
	        }
	        answer = max(answer, ((ll)x * x + (ll)y * y));
	        REP(left, 1, N) {
	            int plus = (left + length - 1) % N;
	            int minus = (left - 1 + N) % N;
	            x -= get<1>(xy[minus]);
	            y -= get<2>(xy[minus]);
                x += get<1>(xy[plus]);
                y += get<2>(xy[plus]);
                answer = max(answer, ((ll)x * x + (ll)y * y));
	        }
	    }
	    out << setprecision(20) << pow(answer, 0.5) << "\n";
	}
};


int main() {
	FEngines solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
