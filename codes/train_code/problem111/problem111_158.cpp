#include <cstdlib>
#include <iostream>

using namespace std;

#define MAX 100000
#define NIL -1


/*
 * ??¨?????¨???????????????????????????????????????
 * parent ???
 * left ???????????????
 * right ??????????????????
 */
struct Node {
    int parent; 
    int left; 
    int right;
};

struct Node T[MAX];
int depthList[MAX];
//node 0: parent = -1, depth = 0, root, [1, 4, 10]
void printTree(int id) {
    cout << "node " << id << ": " << "parent = " << T[id].parent << ", " << "depth = " << depthList[id] << ", ";
    if(T[id].parent == NIL) {
        cout << "root, ";
    }
    else if(T[id].left != NIL) {
        cout << "internal node, ";
    }
    else {
        cout << "leaf, ";
    }
    
    cout << "[";
    
    for(int i = 0, c = T[id].left; c != NIL; i++, c = T[c].right) {
        if(i) {
            cout << ", ";
        }
        cout << c;
    }
    cout << "]" << endl;
}


/**
 * ?????°????????±???????¨????????????????
 * ????????§??¨????????????????????????????????¨???????????§???
 * ????????¨????????????????????°??????????????????????????°????????????
 * @param id
 * @param depth
 */
void rec(int id, int depth) {
    depthList[id] = depth;
    if(T[id].left != NIL) {
        rec(T[id].left, depth + 1);
    }
    
    if(T[id].right != NIL) {
        rec(T[id].right, depth);
    }
}

int main(void) {
    
    int num;
    cin >> num;
    
    //all node is initialized to NIL
    for(int i = 0; i < num; i++) {
        T[i].parent = T[i].left = T[i].right = NIL;
    }
    
    int id, degree, child, preChild;
    for(int i = 0; i < num; i++) {
        cin >> id >> degree;
        for(int j = 0; j < degree; j++) {
            cin >> child;
            if(j == 0) {
                T[id].left = child;
            }
            else {
                T[preChild].right = child;
            }
            preChild = child;
            T[child].parent = id;
        }
    }
    
    int rootId;
    for(int i = 0; i < num; i++) {
        if(T[i].parent == NIL) {
            rootId = i;
        }
    }
    
    rec(rootId, 0);
    
    for(int i = 0; i < num; i++) {
        printTree(i);
    }
    return 0;
}