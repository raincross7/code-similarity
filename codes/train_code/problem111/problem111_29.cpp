#include <iostream>
#include<math.h>
#include<vector>
#include<algorithm>
using namespace std;

#define FOR(k,m,n) for(int (k)=(m);(k)<(n);(k)++)
#define REP(i,n) FOR((i),0,(n))
#define LL long long

#define MAX 100005
#define NIL -1

struct Node{int parent,left,right;};

Node tree[MAX];
int n,depth[MAX];

void print(int u) {
	int i,c;
	//??¨???????????????????????¨???
	cout << "node " << u << ": ";
	cout << "parent = " << tree[u].parent << ", ";
	cout << "depth = " << depth[u] << ", ";

	//?????????????????°???????????????????????°??????????????\???????????¨??\???
	if(tree[u].parent==NIL)cout<<"root, ";
	else if(tree[u].left==NIL )cout<<"leaf, ";
	else cout<<"internal node, ";

	cout<<"[";
	for (i = 0, c = tree[u].left; c != NIL; i++, c = tree[c].right) {
		if(i)cout<<", ";
		cout<<c;
	}
	cout<<"]"<<endl;
}

//?????°????????±???????±???????
void rec(int u, int p) {
	depth[u]=p;
	if (tree[u].right != NIL)rec(tree[u].right, p);//???????????????????????±???????¨????
	if (tree[u].left  != NIL)rec(tree[u].left , p+1);
}

int main() {
	int d,v,c,l,r;
	cin>>n;
	REP(i,n)tree[i].parent=tree[i].left=tree[i].right=NIL;

	REP(i, n) {
		cin>>v>>d;
		REP(j, d) {
			cin>>c;
			if(j==0)tree[v].left=c;
			else tree[l].right=c;
			l=c;
			tree[c].parent=v;
		}
	}
	r=0;
	REP(i,n)if(tree[i].parent==NIL)r=i;
	
	rec(r,0);
	REP(i,n)print(i);
	cin>>n;
	return 0;
}