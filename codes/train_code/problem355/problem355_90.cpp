#include <bits/stdc++.h>
using namespace std;
using ll = long long;

void check(char one, char two, ll N, const std::string& s)
{
    vector<char> ans(N);
    ans[0] = one;
    ans[1] = two;

    if ((one == 'S' && s[0] == 'o') || (one == 'W' && s[0] == 'x')) {
        ans[N - 1] = two;
    } else {
        ans[N - 1] = two == 'S' ? 'W' : 'S';
    }

    for (ll i = 1; i < N - 2; i++) {
        if ((ans[i] == 'S' && s[i] == 'o') || (ans[i] == 'W' && s[i] == 'x')) {
            ans[i + 1] = ans[i - 1];
        } else {
            ans[i + 1] = ans[i - 1] == 'S' ? 'W' : 'S';
        }
    }

    if ((ans[N - 2] == 'S' && s[N - 2] == 'o') || (ans[N - 2] == 'W' && s[N - 2] == 'x')) {
        if (ans[N - 1] != ans[N - 3]) {
            return;
        }
    } else {
        if (ans[N - 1] == ans[N - 3]) {
            return;
        }
    }
    if ((ans[N - 1] == 'S' && s[N - 1] == 'o') || (ans[N - 1] == 'W' && s[N - 1] == 'x')) {
        if (ans[0] != ans[N - 2]) {
            return;
        }
    } else {
        if (ans[0] == ans[N - 2]) {
            return;
        }
    }

    copy(begin(ans), end(ans), ostream_iterator<char>(cout));
    cout << "\n";
    exit(EXIT_SUCCESS);
}

void solve(long long N, std::string s)
{
    check('S', 'S', N, s);
    check('S', 'W', N, s);
    check('W', 'S', N, s);
    check('W', 'W', N, s);

    cout << "-1" << endl;
}

// Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
// clang-format off
#pragma GCC diagnostic ignored "-Wunused-result"
int main(){
    long long N;
    scanf("%lld",&N);
    std::string s;
    std::cin >> s;
    solve(N, s);
    return 0;
}
