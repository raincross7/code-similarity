#include <iostream>
#include <vector>
#include <set>
#include <queue>
#include <list>
using namespace std;

//??\?????????????????????????§???????
struct Edge {
	vector<int> in_n, out_n;
	void set_in(int a) { in_n.emplace_back(a); }
	void set_out(int a) { out_n.emplace_back(a); }
};

int main() {
	//Wiki:?????????????????????????????¢?????´??????????????????

	int V, E; cin >> V >> E;
	vector<Edge> edge(V + 1);
	list<int> L;    //??????????????????????????????????????????????????????????????????
	queue<int> S;   //??\???????????????????????????????????????????????????

					//?????????
	for (int i = 0; i < E;i++) {
		int s, t; cin >> s >> t;
		edge[s].set_out(t);
		edge[t].set_in(s);
	}

	//??\???????????????????????????????????????????????¢?´¢
	for (int i = 0; i < V;i++) {
		if (edge[i].in_n.size() == 0) { S.push(i); }
	}

	while (!S.empty()) {
		//S???????????????n???????????????
		int n = S.front(); S.pop();
		//L???n???????????????
		L.push_back(n);

		/*
		for each n ???????????? e ??¨????????????????????? m do
		??? e ?????°????????????????????????
		if m ?????????????????\??????????????£?????????????????° then
		m ??? S ???????????????
		*/

		int size = edge[n].out_n.size();
		for (int i = 0; i < size; i++) {
			int m = edge[n].out_n[0];

			edge[n].out_n.erase(edge[n].out_n.begin());

			for (int j = 0; j < edge[m].in_n.size();j++) {
				if (edge[m].in_n[j] == n) {
					edge[m].in_n.erase(edge[m].in_n.begin() + j);
					break;
				}
			}
			if (edge[m].in_n.size() == 0) {
				S.push(m);
			}
		}
	}
	for (int n : L) {
		cout << n << endl;
	}
	return 0;
}