#include <bits/stdc++.h>
using namespace std;
using ll=long long;
/*
2番目に大きい値の総和･･･
12345

1234
234
34
4

231
21
2
2個とりの場合一番大きい値以下を全部

54321
4321
432
43
4

41325
1122
323
33
4
そうでもないぽい
ただDPぽい

8 2 7 3 4 5 6 1

2
27
337
3447
44557
555667
1555667

      2
     27
    337
   3447
  44557
 555667
1555667

678
8=1
7=3
{0,0,1,3,9,9}
7の場合(8-2)*(1-0)=6通り
6=7
{0,0,1,3,7,9,9}
6の場合(9?-7)*(3-1)=4通り
5=6
{0,0,1,3,6,7,9,9}
5の場合(9-1)-(3+1))*(3-1)=8通り
4=5
{1,3,5,6,7}
4の場合((7-1)-(3+1))*(3-1)=4
(2個上-1)-(1個下+1))*(1個下-2個下)
{0,0,1,3,4,5,6,7,9,10}
3の場合

0と9は2個いれ

N-1と1だけ特別？
そうでもないか

015342
3から見て、両端が自分より大きい場合は和になる？
015324 =7通り？
3*2+1

126453
{0,3,4,5,7}4の場合　5通り
発展性がどれだけあるか。左と右で、和か。
・64とったとき、1*3 3通り
（1個上)-(自分))*(1個下-(2個下))=3
・45とったとき、1*2 2
(2個上)-(1個上))*(自分-(1個下))=2
小さいのがきたらそのまま。大きいのがきたら更新
全部やってたらN^2でだめだから、
それぞれが何回出現するか個別判断
右みて自分より大きい数が出たら、左に自分より小さい数が何個あるか
左も同じ
結局N^2回足してる
効率的に位置をわりだせれば掛け算であるいは
あれ、積っぽい、いけるか
4*2=8//5
カウントでいけるのかな。lower使えん
もっと早い方法、絶対ある

最低値をとってくるやつ、set
https://atcoder.jp/contests/agc005/submissions/12274141
近いかな、

(2個上)-(1個上))*(自分-(1個下) 
(1個上)-(自分))*(1個下-(2個下)
8 2 7 3 4 5 6 1
{0,0,1,3,9,9}
7の場合(8-2)*(1-0)=6通り
6=7
{0,0,1,3,7,9,9}
6の場合(9?-7)*(3-1)=4通り
5=6
{0,0,1,3,6,7,9,9}
5の場合(9-1)-(3+1))*(3-1)=8通り
4=5
{1,3,5,6,7}
4の場合((7-1)-(3+1))*(3-1)=4
(2個上-1)-(1個下+1))*(1個下-2個下)
{0,0,1,3,4,5,6,7,9,10}
3の場合
*/
int main(){
  ll N,ans=0; cin>>N;
  multiset<ll> S={0,0,N+1,N+1};
  vector<ll> P(N+1,0);
  for(ll i=1; i<=N; i++){
    ll a; cin>>a;
    P[a]=i;
  }
  //最大はどうせ0通り。setにいれとく
  S.insert(P[N]);
  for(ll i=N-1; i>=1; i--){
    S.insert(P[i]);
//for(auto IT=S.begin(); IT!=S.end(); IT++) cout<<*IT;
//cout<<endl;
// (2個上)-(1個上))*(自分-(1個下) 
    ll R1,R2,L1,L2;
    auto IT1=S.find(P[i]);
    auto IT2=IT1;
    //R1
    IT1++,IT1++;
    R1=*IT1;
    IT1--;
    R1-=*IT1;
    IT1--;
    R2=*IT1;
    IT1--;
    R2-=*IT1;
    R1*=R2;
//（1個上)-(自分))*(1個下-(2個下)
    //L1
    IT2++;
    L1=*IT2;
    IT2--;
    L1-=*IT2;
    IT2--;
    L2=*IT2;
    IT2--;
    L2-=*IT2;
    L1*=L2;
    ans+=(R1+L1)*i;
//cout<<"R1:"<<R1<<" L1:"<<L1<<"ans:"<<ans<<endl;    
  }
  cout<<ans<<endl;
}