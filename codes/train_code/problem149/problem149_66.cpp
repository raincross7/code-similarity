/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author KY2001
 */


#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int bpm(int x, int y) {
  if (x == 0)
    return 0;
  else if (y == 0) {
    return 1;
  }
  int ans = 1;
  x %= MOD;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) {
      ans *= x;
      ans %= MOD;
    }
    x = x * x;
    x %= MOD;
  }
  return ans;
}

class DCardEater {
public:
  int solve(std::istream &cin, std::ostream &cout) {
    int N;
    cin >> N;
    vector<int> A(N);
    vector<int> cum_sum_A(100000 + 1, 0);
    int num = 0;
    rep(i, N) {
      cin >> A[i];
      if (cum_sum_A[A[i]] == 0) {
        num += 1;
      }
      cum_sum_A[A[i]] += 1;
    }
    rep(i, 100000 + 1) {
      if (cum_sum_A[i]>=2 && cum_sum_A[i]%2 == 0){
        cum_sum_A[i] = 2;
      }else if (cum_sum_A[i] >= 2 && cum_sum_A[i]%2 == 1){
        cum_sum_A[i] %= 2;
      }
      if (cum_sum_A[i]) {
        cum_sum_A[i] -= 1;
      }
    }
    rep(i, 100000) {
      cum_sum_A[i + 1] += cum_sum_A[i];
    }
    if (cum_sum_A[100000]%2 == 0){
      cout<<num<<endl;
    }else{
      cout<<num-1<<endl;
    }
  }
};


signed main() {
	DCardEater solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
