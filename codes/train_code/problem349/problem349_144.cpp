#include<cstdio>
#include<cstdlib>
#include<algorithm>
using namespace std;

const int MAX_N = 36; // ?????????????????°????????§???

int N;              // ?????????????????°
char card[2];       // ??????????????\????????????????????????????????????1?????????????????????2??????????????°???
char suits[MAX_N];  // ????????????????????????????????????????????????
int numbers[MAX_N]; // ??????????????°?????????????????????????????????

bool isStable(int N,int in_n[],int out_n[],char in_c[],char out_c[]){
	int i,j,a,b;
	for(i=0;i<N;i++){
		for(j=i+1;j<N;j++){
			for(a=0;a<N;a++){
				for(b=a+1;b<N;b++){
					if(in_n[i] == in_n[j] && in_n[i] == out_n[b] && in_n[j] == out_n[a] && in_c[i] == out_c[b] && in_c[j] == out_c[a]) return false;
				}
			}
		}
	}
	return true;
}

void output(int N, char suits[], int numbers[]){
	int i;
	for(i=0;i<N;i++){
		printf("%c%d",suits[i],numbers[i]);
		if(i!=N-1) printf(" ");
		else if(i==N-1) printf("\n");
	}
}

void BubbleSort(int N, char suits_bubble[],int numbers_bubble[]){
	int i,j;
	for(i=0;i<N;i++){
		for(j=N-1;j>i;j--){
			if(numbers_bubble[j] < numbers_bubble[j-1]){
				swap(numbers_bubble[j],numbers_bubble[j-1]);
				swap(suits_bubble[j],suits_bubble[j-1]);
			}
		}
	}
	output(N,suits_bubble,numbers_bubble);
	if(isStable(N,numbers,numbers_bubble,suits,suits_bubble)) printf("Stable\n");
	else printf("Not stable\n");
}

void SelectionSort(int N, char suits_selection[], int numbers_selection[]){
	int i,j;
	int minj;
	for(i=0;i<N;i++){
		minj = i;
		for(j=i;j<=N-1;j++){
			if(numbers_selection[j] < numbers_selection[minj])
				minj = j;
		}
		swap(numbers_selection[i],numbers_selection[minj]);
		swap(suits_selection[i],suits_selection[minj]);
	}
	output(N,suits_selection,numbers_selection);
	if(isStable(N,numbers,numbers_selection,suits,suits_selection)) printf("Stable\n");
	else printf("Not stable\n");
}

int main(){
	int i,j;
	char suits_bubble[MAX_N],suits_selection[MAX_N];
	int numbers_bubble[MAX_N],numbers_selection[MAX_N];

	scanf("%d",&N);
	for(i=0;i<N;i++){
		scanf("%s",card);
		suits[i] = card[0];
		suits_bubble[i] = card[0];
       		suits_selection[i] = card[0];	// ??\??????1??????????????\????????????
		numbers[i] = card[1]-'0';
		numbers_bubble[i] = card[1]-'0';
	        numbers_selection[i] = card[1]-'0';	// ??\??????2??????????????£??\?????????
	}

	BubbleSort(N,suits_bubble,numbers_bubble);
	SelectionSort(N,suits_selection,numbers_selection);

	return 0;
}