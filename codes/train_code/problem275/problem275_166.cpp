/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>

#include <string>
#include <vector>
#include <math.h>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <bitset>
using namespace std;
using ll = long long;
constexpr ll INF = 1010000000000000017LL;
#define rep(i, n) for(ll i = 0; i < (ll)(n); i++)
#define all(v) v.begin(), v.end()

ll GCD(ll a, ll b) {
    if(b==0) return a;
    else return GCD(b, a%b);
}

ll LCM(ll a, ll b) {
    return a/GCD(a,b)*b;
}

class B2 {
public:
	void solve(std::istream& in, std::ostream& out) {
        ll w,h,n;in>>w>>h>>n;
        vector<vector<bool >> vv(h,vector<bool> (w,0));
        rep(i,n){
            ll x,y,a;in>>x>>y>>a;
            --x;--y;
            if(a==1){
                for (int j = 0; j < h; ++j) {
                    for (int k = 0; k <= x; ++k) {
                        vv.at(j).at(k)=1;
                    }
                }
            } else if (a==2){
                for (int j = 0; j < h; ++j) {
                    for (int k = x+1; k < w; ++k) {
                        vv.at(j).at(k)=1;
                    }
                }
            } else if (a==3) {
                for (int j = 0; j <= y; ++j) {
                    for (int k = 0; k < w; ++k) {
                        vv.at(j).at(k)=1;
                    }
                }
            } else {
                for (int j = y+1; j < h; ++j) {
                    for (int k = 0; k < w; ++k) {
                        vv.at(j).at(k)=1;
                    }
                }
            }

        }
        ll cnt=0;
        rep(i,h){
            rep(j,w){
                if(!vv.at(i).at(j)) ++cnt;
            }
        }
        out<<cnt<<endl;
    }
};


int main() {
	B2 solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
