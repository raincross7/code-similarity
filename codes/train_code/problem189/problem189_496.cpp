/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>

#include <string>
#include <vector>
#include <math.h>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <bitset>
using namespace std;
using ll = long long;
constexpr ll INF = 1010000000000000017LL;
#define rep(i, n) for(ll i = 0; i < (ll)(n); i++)
#define all(v) v.begin(), v.end()

ll GCD(ll a, ll b) {
    if(b==0) return a;
    else return GCD(b, a%b);
}

ll LCM(ll a, ll b) {
    return a/GCD(a,b)*b;
}

class CCatSnukeAndAVoyage {
public:
	void solve(std::istream& in, std::ostream& out) {
        ll n,m; in>>n>>m;
        set<ll> from,to;

        rep(i,m){
            ll a,b;in>>a>>b;
            if(a==1) from.insert(b);
            else if (b==n) to.insert(a);
        }
        for(auto i: to){
            if(from.count(i)){
                out<<"POSSIBLE"<<endl;
                return;
            }
        }
        out<<"IMPOSSIBLE"<<endl;
	}
};


int main() {
	CCatSnukeAndAVoyage solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
