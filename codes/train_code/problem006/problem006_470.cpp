/*
 * http://judge.u-aizu.ac.jp/onlinejudge/description.jsp?id=1130&lang=jp
 */


#include <iostream>
#include <limits>

constexpr size_t MAX_HEIGHT = 20;
const char START_TILE = '@';
const char PASSABLE_TILE = '.';
const char PROHIBITED_TILE = '#';
const char PASSED_TILE = 'P';

bool is_wall(std::string world[MAX_HEIGHT], size_t x, size_t y) {
	char tile = world[y][x];
	return tile == PROHIBITED_TILE || tile == PASSED_TILE;
}

bool valid(std::string world[MAX_HEIGHT], size_t width, size_t height, size_t x, size_t y) {
	return x < width && y < height // x and y is unsigned
		   && !is_wall(world, x, y);
}

int walk(std::string world[MAX_HEIGHT], size_t width, size_t height, size_t x, size_t y) {
	if (!valid(world, width, height, x, y)) {
		return 0; // ????????????????????\?????????????£?or??¢?´¢??????
	}
	int total = 1; // ????????????????????\?????????1?????¨??????????????????
	world[y][x] = PASSED_TILE; // ??????????????¨????????????????????¨?????????????????????????????????
	// ?????????????????§??????????????????valid???????????????walk????????§
	total += walk(world, width, height, x - 1, y);
	total += walk(world, width, height, x + 1, y);
	total += walk(world, width, height, x, y - 1);
	total += walk(world, width, height, x, y + 1);
	return total;
}

void process(size_t width, size_t height) {
	std::string world[MAX_HEIGHT];
	size_t x = std::numeric_limits<size_t>::max(), y = std::numeric_limits<size_t>::max();
	for (size_t i = 0; i < height; ++i) {
		std::cin >> world[i];
		size_t start_index = world[i].find(START_TILE);
		if (start_index != std::string::npos) {
			x = start_index;
			y = i;
		}
	}

	std::cout << walk(world, width, height, x, y) << std::endl;
}

int main() {
	size_t width, height;
	while (true) {
		std::cin >> width >> height;
		if (width == 0 || height == 0) {
			break;
		}
		else {
			process(width, height);
		}
	}
}