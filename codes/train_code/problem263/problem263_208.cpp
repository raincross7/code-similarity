/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <cstdio>
#include <cstring>
#include <cmath>
#include <utility>
#include <iostream>
#include <functional>
#include <bitset>
#include <algorithm>
#include <vector>
#include <forward_list>
#include <set>
#include <map>
#include <queue>
#include <deque>
#include <stack>
#include <numeric>
#define ll long long int
#define rep(i,n) for(int i=0;i<(n);i++)
#define pb push_back
using namespace std;
int mx4[] = {0,1,0,-1};
int my4[] = {1,0,-1,0};
int mx2[] = {1,0};
int my2[] = {0,1};

class DLamp {
public:
	void solve(istream& in, ostream& out) {
        int h,w;
        in >> h >> w;
        vector<vector<char>> s(h,vector<char> (w));
        rep(i,h){
            rep(j,w){
                cin >> s[i][j];
            }
        }
        vector<vector<int>> r(h,vector<int> (w)),l(h,vector<int> (w)),u(h,vector<int> (w)),d(h,vector<int> (w));
        rep(i,h) rep(j,w){
            r[i][j] = 0; l[i][j] = 0; u[i][j] = 0; d[i][j] = 0;
        }

        rep(i,h) rep(j,w) {
            if(s[i][j] == '.'){
                if(j != 0) l[i][j] = l[i][j-1] + 1;
                if(j == 0) l[i][j] = 1;
            }
        }
        for(int i=0;i<h;i++){
            for(int j=w-1;j>=0;j--){
                if(s[i][j] =='.'){
                    if(j != w-1) r[i][j] = r[i][j+1] + 1;
                    else r[i][j] = 1;
                }
            }
        }
        for(int i=0;i<w;i++) {
            for (int j = 0; j < h; j++) {
                if (s[j][i] == '.') {
                    if (j != 0) u[j][i] = u[j - 1][i] + 1;
                    else u[j][i] = 1;
                }
            }
        }
        for(int i=0;i<w;i++){
            for(int j=h-1;j>=0;j--){
                if(s[j][i] == '.'){
                    if(j != h-1) d[j][i] = d[j+1][i] + 1;
                    else d[j][i] = 1;
                }
            }
        }
      
        int ans = 0,check;
        rep(i,h){
            rep(j,w){
                check = l[i][j] + r[i][j] + u[i][j] + d[i][j] - 3;
                ans = max(ans,check);
              }
        }
        out << ans << endl;
	}
};

int main() {
	DLamp solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}