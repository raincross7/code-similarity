#include <bits/stdc++.h>
using namespace std;
using Graph = vector<vector<int>>;
typedef long long ll;
void solve(long long N, long long K, std::vector<long long> P, std::vector<long long> C){
    Graph G(N);
    vector<bool> reached(N,false);
    stack<pair<long long,long long>> st;
    for (int i = 0;i<N;i++){
        P[i]--;
    }
    ll ans=-100000000000000000;
    for (int v=0;v<N;v++){
        ll x = v;
        vector<ll> s;
        ll tot = 0;
        while(1){
            x = P[x];
            s.push_back(C[x]);
            tot +=C[x];
            if(x==v){
                break;
            }
        }
        ll l = s.size();
        ll t = 0;
        for(int i = 0;i<l;i++){
            t+=s[i];
            if(i+1>K) break;
            ll now = t;
            if(tot>0){
                ll cycle = (K-1-i)/l;
                now+=cycle*tot;
            }
            ans =max(ans,now);
        }
    }
    cout<<ans<<endl;
}

// Generated by 1.1.7.1 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long K;
    scanf("%lld",&K);
    std::vector<long long> P(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&P[i]);
    }
    std::vector<long long> C(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&C[i]);
    }
    solve(N, K, std::move(P), std::move(C));
    return 0;
}
