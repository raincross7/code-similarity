/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kishan Sairam Adapa
 */

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#define ll long long int
#define MOD ((int)(1e9) + 7)

using namespace std;

class BGoodDistance {
public:
    bool isSquare(ll x) {
        if(x == 1) return true;
        ll start = 1, end = x/2;
        while(start <= end) {
            ll mid = (start+end)/2;
            if(mid*mid <= x) start = mid+1;
            else end = mid-1;
        }
        return (start-1)*(start-1) == x;
    }
    void solve(istream& cin, ostream& cout) {
        int n, d;
        cin >> n >> d;
        vector<vector<int>> s;
        for(int i=0; i<n; i++) {
            vector<int> x;
            for(int j=0; j<d; j++) {
                int tp;
                cin >> tp;
                x.push_back(tp);
            }
            s.push_back(x);
        }
        ll cnt=0;
        for(int i=0; i<n-1; i++) {
            for(int j=i+1; j<n; j++) {
                ll dist = 0;
                for(int k=0; k<d; k++) {
                    dist += (s[i][k] - s[j][k]) * (s[i][k] - s[j][k]);
                }
                if(isSquare(dist)) cnt++;
            }
        }
        cout << cnt << '\n';
    }
};


int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    BGoodDistance solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
