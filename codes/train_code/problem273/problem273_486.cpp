#include <bits/stdc++.h>
using namespace std;
using ll = long long;


void solve(long long N, long long D, long long A, std::vector<long long> X, std::vector<long long> H){
    vector<pair<long long,long long>> pairs(N);
    for(int i=0;i<N;i++){
        pairs[i] = make_pair(X[i],H[i]);
    }
    sort(pairs.begin(),pairs.end());
    sort(X.begin(),X.end());
    long long ans =0;
    vector<ll> field(N,0);
    for(int i=0;i<N;i++){
        if(i>0){
            field[i] += field[i-1];
        }
        pairs[i].second -=field[i];
        if(pairs[i].second>0){
            int count = (pairs[i].second+A-1)/A;
            // cerr <<"i="<<i<<"count="<<count  << endl;
            ans+=count;
            field[i] += (count*A);
            auto itr =upper_bound(X.begin(),X.end(),X[i]+2*D);
            if(itr!=X.end()){
                field[itr-X.begin()] -=(count*A);
                cerr << itr-X.begin() << endl;
            }
        }
    }
    cout << ans << endl;

}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long D;
    scanf("%lld",&D);
    long long A;
    scanf("%lld",&A);
    std::vector<long long> X(N);
    std::vector<long long> H(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&X[i]);
        scanf("%lld",&H[i]);
    }
    solve(N, D, A, std::move(X), std::move(H));
    return 0;
}
