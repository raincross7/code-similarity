#include <bits/stdc++.h>
using namespace std;


#define ull unsigned long long
#define testcases() int var;  cin>>var; while(var--)

int length(ull n)
{
    int cnt = 0;
    while(n)
    {
        cnt++;
        n>>=1;
    }
    return cnt;
}

void solve(long long N, std::vector<long long> A){
    long long tmp = 0;
    for(long long a:A)tmp ^= a;
    for(int i=0;i<N;++i){
        A[i] &= (1ll<<62) - 1 - tmp;
    }
    vector<long long> lengths(N);
    for(int i=0; i<N; i++)lengths[i] = length(A[i]);

    // put all numbers with same bit-length in one bucket --> buckets[]
    vector<ull> buckets[65];
    for(int i=0; i<N; i++)buckets[lengths[i]].push_back(A[i]);

    // this array will have a number from each bucket --> modified_array[]
    ull modified_array[100], m_index = 0;

    for(int i=64; i>0; i--) //since long long is 8 byte = 64 bit long
    {
        if(buckets[i].size()) //if there exist at least one element in bucket[i]
        {
            // put first value from bucket in modified_array[]
            modified_array[m_index++]=buckets[i][0];

            // and put remaining elements from same bucket again in corresponding 
            // buckets after ex-oring 
            for(int j=1; j<buckets[i].size(); j++)
            {
                ull temp = buckets[i][0] ^ buckets[i][j];
                int len = length(temp);
                buckets[len].push_back(temp);
            }
        }
    }

    // Step 4 according to the explained procedure
    // make ans = k for codechef and ans = 0 for spoj :)
    ull ans = 0;
    for(int i=0; i<m_index; i++) 
        if(ans < (ans ^ modified_array[i]))
            ans = (ans ^ modified_array[i]);

    // Step 5 according to the explained procedure
    cout<<tmp + ans * 2<<endl;
}

// Generated by 1.1.4 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> A(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&A[i]);
    }
    solve(N, std::move(A));
    return 0;
}
