#include<iostream>
#include<algorithm>
#include<cstdint>
using namespace std;

const int MAX = 1000;
int main() {
	int N;
	pair<int64_t, int64_t> P[MAX];
	cin >> N;
	for (int i = 0;i < N;++ i) cin >> P[i].first >> P[i].second;
	
	for (int i = 1;i < N;++ i) { // 不可能条件を先に消すよ！
		if ((abs(P[i].first - P[0].first + P[i].second - P[0].second) & 1) != 0) { // 偶奇一致しないと無理
			cout << -1;
			return 0;
		}
	}
	int m = 30;
	bool isEven = (abs(P[0].first + P[0].second) & 1) == 0;
	cout << m + (isEven ? 2 : 1) << endl;
	for (int i = m;i >= 0;-- i) cout << (1 << i) << " ";
	if (isEven) cout << 1;
	cout << endl;
	
	for (int i = 0;i < N;++ i) {
		if (isEven) ++ P[i].first;
		for (int j = m;j >= 0;-- j) {
			if (abs(P[i].first) >= abs(P[i].second)) {
				if (P[i].first >= 0) {
					P[i].first -= 1 << j;
					cout << 'R';
				} else {
					P[i].first += 1 << j;
					cout << 'L';
				}
			} else {
				if (P[i].second >= 0) {
					P[i].second -= 1 << j;
					cout << 'U';
				} else {
					P[i].second += 1 << j;
					cout << 'D';
				}
			}
		}
		if (isEven) cout << 'L';
		cout << endl;
	}
	return 0;
}
/*
31536000のコメント解説欄
ここテンプレで用意してるから、A問題とかだとこの先空欄の危険あり
また、コンテスト後に https://31536000.hatenablog.com/ で解説していると思うので、良かったら読んでねー

まず、全て|X|, |Y|上で考える
え、負数どうするのって？後で符号反転すれば良いでしょ

で、その時のX_i+Y_iとX_j+Y_jの差が偶数の時、その差の半分のアームが2個あれば両方に対応できる
小さい方には折り畳み、そうでない方は伸ばせば良いからね

制約から、1,1,2,4,8,...,2^38を考えてみよう
この時、これを2^37まで片方に伸ばして最後だけ折りたたむと原点に戻る
後は逆方向に1個やると、その値の2倍だけ長さが減る
逆に、横方向に1個やると、その値と同値だけ長さが減る
偶奇一致してないとダメそう、-1
逆に一致してるなら、最初のある点の位置まで動かすアームを2個導入すれば、全ての値が偶数になるので何とかなりそう

次に、横方向をまずは合わせる
これは、値についてそのbitの位置を動かせば良い
例えば7なら1,2,4を横向きに
例えば10なら2,8を横向きに
この後、縦方向から横方向の値を引き算する
残った値を縦方向で調節、これは逆方向に残った値分動かすイメージでおｋ

おや、同値どうする？例えば4, 8
1, 1, 2を横方向、残り……?とかの時
これは4が余るので、1, 1, 2を畳んでしまうと良い
お、大きい方から作れば必ず作れるのでは
例えば15, 7を考えて、15=1+2+4+8とする
その時7は……えーと、15=16-1にすれば7=1+2+4かいけるな(面倒な)
これ、何らかの計算で導出できないかな？
両方を奇数と仮定しようか(偶数なら動かせば良いので)
その時、両方に1を配り、残りを何とかすれば良い
ここで、a±1, b±1の4通りのうちどれか一つは必ず被らない作り方がある、これは真か？
13と13を考えると、12=4+8,14=16-2……行けるか……？
ちょっとアプローチを変えて、次のようなことを考えてみる
a <= bとする
この時、先にbに対してb以上の最小の2^xを割り当てる(使われているなら2^x-1を割り当てる)

以下、解説AC
考察はこのまま残しておきます
*/