/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <fstream>

#include <string>
#include <vector>
#include <math.h>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <bitset>
using namespace std;
using ll = long long;
constexpr ll INF = 1010000000000000017LL;
#define rep(i, n) for(ll i = 0; i < (ll)(n); i++)
#define all(v) v.begin(), v.end()

ll GCD(ll a, ll b) {
    if(b==0) return a;
    else return GCD(b, a%b);
}

ll LCM(ll a, ll b) {
    return a/GCD(a,b)*b;
}

class AConnectionAndDisconnection {
public:
    ll COUNT(string s){
        ll cnt=0;
        for(int i=1; i<s.size(); ++i){
            if(s[i]==s[i-1]) {
                s[i]='1';
                ++cnt;
            }
        }
        return cnt;
    }
	void solve(std::istream& in, std::ostream& out) {
        string s;ll k;in >> s >> k;
        if(s==string(s.size(),s[0])) {
            out<<s.size()*k/2<<endl;
        } else {
            ll a = COUNT(s);
            ll d = COUNT(s+s)-COUNT(s);
            out<<a+(k-1)*d<<endl;
        }
	}
};


int main() {
	AConnectionAndDisconnection solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
