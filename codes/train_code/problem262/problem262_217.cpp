/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kishan Sairam Adapa
 */

#include <algorithm>
#include <array>
#include <bitset>
#include <cassert>
#include <cmath>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <deque>
#include <functional>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#define ll long long int
#define MOD ((int)(1e9) + 7)

using namespace std;

class CExceptionHandling {
public:
    void solve(istream& cin, ostream& cout) {
        int n; cin >> n;
        vector<int> a;
        for(int i=0; i<n; i++) {
            int tp; cin >> tp;
            a.push_back(tp);
        }
        int max1  = -1, max_cnt = 0, max2 = -1;
        for(auto k: a) {
            if(k > max1) {
                max1 = k;
                max_cnt = 1;
            } else if (k == max1) {
                max_cnt++;
            }
        }
        if(max_cnt > 1) {
            for(int i=0; i<n; i++) cout << max1 << '\n';
        } else {
            for (auto k: a) {
                if (k == max1) continue;
                max2 = max(max2, k);
            }
            for(int i=0; i<n; i++) {
                if(a[i] == max1) cout << max2 << '\n';
                else cout << max1 << '\n';
            }
        }
    }
};


int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);
    CExceptionHandling solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
