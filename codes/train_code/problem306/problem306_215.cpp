/* Generated by powerful Codeforces Tool
 * You can download the binary file in here https://github.com/xalanq/cf-tool (Windows, macOS, Linux)
 * Author: alireza_kaviani
 * Time: 2020-05-14 12:03:49
**/
#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

using namespace std;
using namespace __gnu_pbds;

template <class T> using Tree = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;

typedef long long ll;
typedef long double ld;
typedef pair<ll, ll> pll;

#define all(x)                      (x).begin(),(x).end()
#define Sort(x)                     sort(all((x)))
#define X                           first
#define Y                           second
#define sep                         ' '
#define endl                        '\n'
#define SZ(x)                       ll(x.size())

ll poww(ll a, ll b, ll md) {
    return (!b ? 1 : (b & 1 ? a * poww(a * a % md, b / 2, md) % md : poww(a * a % md, b / 2, md) % md));
}

const ll MAXN = 1e5 + 10;
const ll LOG = 22;
const ll INF = 8e18;
const ll MOD = 1e9 + 7; // 998244353; // 1e9 + 9;

int n , x[MAXN] , L , q , nxt[LOG][MAXN];

int main() {
    ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);

    cin >> n;
    for(int i = 1 ; i <= n ; i++)   cin >> x[i];
    cin >> L;
    for(int i = 1 ; i <= n ; i++)   nxt[0][i] = upper_bound(x + 1 , x + n + 1 , x[i] + L) - x - 1;
    for(int i = 1 ; i < LOG ; i++)  for(int j = 1 ; j <= n ; j++)   nxt[i][j] = nxt[i - 1][nxt[i - 1][j]];
    cin >> q;
    while(q--){
        int l , r;
        cin >> l >> r;
        if(l > r)   swap(l , r);
        int ans = 0;
        for(int i = LOG - 1 ; i >= 0 ; i--) if(nxt[i][l] < r)   l = nxt[i][l] , ans += (1 << i);
        cout << ans + 1 << endl;
    }

    return 0;
}
/*

*/
