/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include<bits/stdc++.h>
using namespace std;

#define rep(i,n) for(int64_t i = 0;i < n;i++)
using ll = int64_t;
template<class T> bool chmin(T& a,T b){
    if(a > b){ a = b; return true; }else return false;
}
template<class T> bool chmax(T& a,T b){
    if(a < b){ a = b; return true; }else return false;
}


class CPushpush {
public:
	void solve(std::istream& cin, std::ostream& cout) {
        cin.tie(0);
        ios::sync_with_stdio(false);
        cout << fixed << setprecision(20);

        int64_t n;cin >> n;
        vector<int> a,b;

        rep(i,n){
            int64_t foo;cin >> foo;
            if(i % 2 == 0) a.push_back(foo);
            else b.push_back(foo);
        }

        if(n % 2 == 1){
            reverse(a.begin(),a.end());
            for(auto i : a)cout << i << ' ';
            for(auto i : b)cout << i << ' ';
            cout << '\n';
        }else{
            reverse(b.begin(),b.end());
            for(auto i : b)cout << i << ' ';
            for(auto i : a)cout << i << ' ';
            cout << '\n';
        }

        //int t;cin >> t;rep(i,t)main2(cin,cout);
	}
	void main2(istream& cin,ostream& cout){

	}
};


int main() {
	CPushpush solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
