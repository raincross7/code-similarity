#include <bits/stdc++.h>
using namespace std;
using ll = long long;

ll f(ll station_idx, ll start_time, long long N, const std::vector<long long>& C, const std::vector<long long>& S, const std::vector<long long>& F)
{
    if (station_idx == N - 1) {
        return start_time;
    }

    ll ride_time = max((start_time + F[station_idx] - 1) / F[station_idx] * F[station_idx], S[station_idx]);

    return f(station_idx + 1, ride_time + C[station_idx], N, C, S, F);
}

void solve(long long N, std::vector<long long>&& C, std::vector<long long>&& S, std::vector<long long>&& F)
{
    for (ll i = 0; i < N; ++i) {
        cout << f(i, 0, N, C, S, F) << "\n";
    }
}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
// clang-format off
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> C(N-1);
    std::vector<long long> S(N-1);
    std::vector<long long> F(N-1);
    for(int i = 0 ; i < N-1 ; i++){
        scanf("%lld",&C[i]);
        scanf("%lld",&S[i]);
        scanf("%lld",&F[i]);
    }
    solve(N, std::move(C), std::move(S), std::move(F));
    return 0;
}
