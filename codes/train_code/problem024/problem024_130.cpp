#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

void solve(long long N, long long L, long long T, std::vector<long long> X, std::vector<long long> W){
    ll count = 0;    
    for (int i=1;i<N;i++){
        ll init_pos;
        if (W[0] ==1 &&  W[i] == 2){
            init_pos = X[i]-X[0];
            if (2*T >= init_pos){
                count += 1 + (2*T - init_pos)/L;
            }
        }else if (W[0] ==2 &&  W[i] == 1){
            init_pos = L - (X[i]-X[0]);
            if (2*T >= init_pos){
                count += 1 + (2*T - init_pos)/L;
            }
        }else{
                // pass
        } 
    }
    int number = (W[0]==1)? count%N : (N +(-count %N))%N;
    vector<ll> final_pos(N,0);
    for (int i=0;i<N;i++){
        ll increment = (W[i]==1)? T%L:-T%L + L;
        final_pos[i] = (X[i] + increment) %L;
    }
    ll pos_number = final_pos[0]; // ゼッケンがnumberの蟻が final_pos[0]にいるはず
    sort(final_pos.begin(),final_pos.end());
    int p;
    if (W[0] == 2){//もし同じ場所に複数の蟻がいる場合、そこでそれぞれスワップするので
        p = lower_bound(final_pos.begin(),final_pos.end(),pos_number) -final_pos.begin();
    }else{
        p = upper_bound(final_pos.begin(),final_pos.end(),pos_number) -final_pos.begin() -1;
    }
    // ゼッケンがnumberの蟻が
    for (int i=0;i<N;i++){
        printf("%lld\n",final_pos[(2*N+p-number+i)%N]);
    }

}

// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    long long L;
    scanf("%lld",&L);
    long long T;
    scanf("%lld",&T);
    std::vector<long long> X(N);
    std::vector<long long> W(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&X[i]);
        scanf("%lld",&W[i]);
    }
    solve(N, L, T, std::move(X), std::move(W));
    return 0;
}
