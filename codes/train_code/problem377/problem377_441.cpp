/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author rahdirigs
 */

#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

template <typename T> void add(T& a, T b, int mod) {
	a += b;
	if (a >= mod)
		a -= mod;
}

template <typename T> void sub(T& a, T b, int mod) {
	a -= b;
	if (a < 0)
		a += mod;
}

class TaskM {
	static const int mod = 1e9 + 7;
public:
	void solve(std::istream& in, std::ostream& out) {
		int N, K;
		in >> N >> K;
		vector<int> a(N + 1);
		vector<vector<ll>> dp(N + 1, vector<ll> (K + 1, 0));
		for (int i = 1; i <= N; i++) in >> a[i];
		dp[0][0] = 1;
		for (int i = 1; i <= N; i++) {
			vector<ll> pref(K + 1, 0);
			pref[0] = dp[i - 1][0];
			for (int j = 1; j <= K; j++) add(pref[j], dp[i - 1][j] + pref[j - 1], mod);
			for (int j = 0; j <= K; j++) {
				dp[i][j] = pref[j];
				if (j - a[i] - 1 >= 0) sub(dp[i][j], pref[j - a[i] - 1], mod);
			}
		}
		out << dp[N][K];
	}
};

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(0);
	TaskM solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
