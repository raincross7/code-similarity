/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <string>
#include <vector>
#include <math.h>
#include <map>
#include <set>
#include <algorithm>
#include <numeric>
#include <bitset>
using namespace std;
using ll = long long;
constexpr ll INF = 1010000000000000017LL;
#define rep(i, n) for(ll i = 0; i < (ll)(n); i++)
#define all(v) v.begin(), v.end()

ll GCD(ll a, ll b) { if(b==0) return a; else return GCD(b, a%b); }
ll LCM(ll a, ll b) { return a/GCD(a,b)*b; }

class BBalance {
public:
	void solve(std::istream& in, std::ostream& out) {
	    int n;in>>n;
	    vector<int> w(n);
	    rep(i,n) in>>w[i];
	    int res = 100000000;
	    auto right = w.begin()+1;
	    for(; right < w.end(); ++right){
	        res=min(res,abs(accumulate(w.begin(),right,0)-accumulate(right,w.end(),0)));
//	        out<<*right<<' '<<accumulate(w.begin(),right,0)<<' '<<accumulate(right,w.end(),0)<<endl;
	    }
	    out<<res<<endl;
	}
};


int main() {
	BBalance solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
