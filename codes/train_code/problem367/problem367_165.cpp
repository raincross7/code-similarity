/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */


#include <iostream>
#include <algorithm>
#include <vector>
#include <string>
#include <queue>
#include <map>
#include <set>
#include <functional>
#include <cmath>
#include <numeric>
#include <iterator>
#include <fstream>

#define SIZE 100005
#define MOD 1000000007

using namespace std;

class CABSubstrings {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    int64_t n;
    cin >> n;
    vector<string> vec;
    queue<string> front;
    queue<string> back;
    queue<string> both;
    int res = 0;
    for (int i = 0; i < n; ++i) {
      string item;
      cin >> item;
      {
        bool a_flag = false;
        for (const auto &word : item) {
          if (word == 'A') {
            a_flag = true;
          } else if (word == 'B') {
            if (a_flag)res++;
            a_flag = false;
          } else {
            a_flag = false;
          }
        }
      }
      if (item.front() == 'B' && item.back() == 'A') both.push(item);
      else if (item.front() == 'B') front.push(item);
      else if (item.back() == 'A') back.push(item);
      else vec.emplace_back(item);
    }
//    while(!front.empty() && !back.empty()){
//      res++;
//      front.pop();
//      back.pop();
//    }
    res += min(front.size(), back.size());
    if (both.size() > 0) {
      res += both.size() - 1;
      res += 1 && (front.size() != 0 || back.size() != 0);
    }
    cout << res << endl;
  }
};


int main() {
    CABSubstrings solver;
    std::istream& in(std::cin);
    std::ostream& out(std::cout);
    solver.solve(in, out);
    return 0;
}
