#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
 
 
void solve(long long N, std::vector<long long> A){
    std::sort(A.begin(),A.end());
    int positive_start_idx = 0;
    for (int i=0;i<N;i++){
        if(A[i]>0) break;
        positive_start_idx++;
    }
    ll n_pos = N-positive_start_idx;
    ll n_neg = N -n_pos;
    if (n_pos==0LL){
        n_pos=1;
        n_neg=N-1;
    }else if (n_neg==0LL){
        n_neg=1;
        n_pos=N-1;
    }
    vector<pair<ll,ll> > ret_print;
    ll x = A[0];
    for (int i = n_neg;i<N-1;i++){
        ret_print.push_back(make_pair(x,A[i]));
        x = x- A[i];
    }
    ret_print.push_back(make_pair(A[N-1],x));
    x = A[N-1] -x ;
    for (int i=1;i<n_neg;i++){
        ret_print.push_back(make_pair(x,A[i]));
        x = x - A[i];
    }
    printf("%lld\n",x);
    for (auto itr=ret_print.begin();itr!=ret_print.end();itr++ ){
        printf("%lld %lld\n",(*itr).first,(*itr).second);
    }
 
}
 
// Generated by 1.1.6 https://github.com/kyuridenamida/atcoder-tools  (tips: You use the default template now. You can remove this line by using your custom template)
int main(){
    long long N;
    scanf("%lld",&N);
    std::vector<long long> A(N);
    for(int i = 0 ; i < N ; i++){
        scanf("%lld",&A[i]);
    }
    solve(N, std::move(A));
    return 0;
}