/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Kein Yukiyoshi
 */

#include "bits/stdc++.h"
#define int long long
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); i++)
#define rep(i, n) for (int i = 0; i < (int)(n); i++)
#define ALL(obj) begin(obj), end(obj)
#define MAX(x) *max_element(ALL(x))
#define MIN(x) *min_element(ALL(x))
#define LOWER_BOUND(A, key) distance(A.begin(), lower_bound(ALL(A), key))
#define UPPER_BOUND(A, key) distance(A.begin(), upper_bound(ALL(A), key))
#define Endl endl

using namespace std;
using ll      = long long;
const int MOD = (int)(1e9 + 7);
const int INF = (int)(1e13 + 7);

int ceil_(int a, int b) { return (a >= 0 ? (a + (b - 1)) / b : (a - (b - 1)) / b); }
int mod(int a, int b) { return a >= 0 ? a % b : a - (b * ceil_(a, b)); }
int bpm(int x, unsigned int y) {
  if (x == 0) return 0;
  if (y == 0) return 1;
  int ans   = 1;
  int digit = (int)((log((double)y) / log((double)2) / 1 + 1));
  x %= MOD;
  for (int i = 0; i < digit; i++) {
    if (((y >> i) & 1u) == 1) ans = ans * x % MOD;
    x = x * x % MOD;
  }
  return ans;
}
template <class T>
void cumulative_sum(T &container) {
  for (int i = 0; i < container.size() - 1; i++) container[i + 1] += container[i];
}
bool judge_Palindrome(string S) {
  for (int i = 0; i < S.size() / 2; i++) {
    if (S[i] != S[S.size() - 1 - i]) {
      return false;
    }
  }
  return true;
}

class CInsertingX {
public:
  static void solve(std::istream &cin, std::ostream &cout) {
    string S;
    cin >> S;
    string temp{};
    rep(i, S.size()) {
      if (S[i] != 'x') {
        temp += S[i];
      }
    }
    if (!judge_Palindrome(temp)) {
      cout << -1 << endl;
      return;
    }
    vector<int> x_num;
    int before = 0;
    int now    = 0;
    rep(i, S.size()) {
      if (now == ceil_(temp.size(), 2)) break;
      if (S[i] == temp[now]) {
        x_num.emplace_back(i - before);
        before = i + 1;
        now++;
      }
    }
    now    = 0;
    before = S.size() - 1;
    for (int i = S.size() - 1; i >= 0; i--) {
      if (now == ceil_(temp.size(), 2)) break;
      if (S[i] == temp[now]) {
        x_num[now] = abs(x_num[now] - (before - i));
        before     = i - 1;
        now++;
      }
    }
    cout << accumulate(ALL(x_num), 0LL) << endl;
  }
};


signed main() {
  CInsertingX solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
